# task file for full setup

# Step 1:

  - name: "Apt Update"
    become: true
    apt:
      update_cache: yes
  
  - name: Install packages 
    apt: 
      name: "{{ packages }}"
      state: present
    vars:
      packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
        - python3-pip
        - virtualenv
        - python3-setuptools
  
  - name: Add overlay and br_netfilter to modules-load.d
    lineinfile:
      path: /etc/modules-load.d/k8s.conf
      line: '{{ item }}'
      state: present
      create: true
    with_items:
      - overlay
      - br_netfilter

  - name: Load kernel modules k8s.conf
    command: "{{ item }}"
    with_items:
      - modprobe overlay
      - modprobe br_netfilter

  - name: Set sysctl parameters for kubernetes
    sysctl:
      name: "{{ item }}"
      state: present 
      reload: yes 
      value: 1
      sysctl_file: /etc/sysctl.d/k8s.conf
    with_items:
      - net.bridge.bridge-nf-call-iptables
      - net.bridge.bridge-nf-call-ip6tables
      - net.ipv4.ip_forward

  - name: Add overlay and br_netfilter to modules-load.d
    lineinfile:
      path: /etc/modules-load.d/crio.conf
      line: '{{ item }}'
      state: present
      create: true 
    with_items:
      - overlay
      - br_netfilter
  
  - name: Load kernel modules crio.conf 
    command: '{{ item }}'
    with_items:
      - modprobe overlay
      - modprobe br_netfilter

  - name: Set sysctl parameters for kubernetes-cri
    sysctl:
      name: "{{ item }}"
      state: present
      reload: yes
      value: 1
      sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
    with_items:
      - net.bridge.bridge-nf-call-iptables
      - net.bridge.bridge-nf-call-ip6tables
      - net.ipv4.ip_forward
  
  - name: Load kernel modules 99-kubernetes-cri 
    command: '{{ item }}'
    with_items:
      - modprobe overlay
      - modprobe br_netfilter

  - name: Add GPG key for docker 
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu focal stable
      state: present

  - name: Install docker and its dependencies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - docker-ce
        - docker-ce-cli
        - containerd.io 
    
  - name: "Install Docker Module for Python"
    become: true
    pip:
      name: docker

  # Docker-compose installation
  - name: Install docker-compose from official github repo
    remote_user: root
    get_url:
      url : https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64
      dest: /usr/local/bin/docker-compose
      mode: 'u+x,g+x'

  # - name: Add ubuntu user to docker group
  #   user:
  #     name: "{{ username }}"
  #     group: docker
  #   vars:
  #     username:
  #     - sovichea
  #     - phireak

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap 
      state: absent
    with_items:
      - swap
      - none
  
  - name: Disable swap
    command: swapoff -a 

  - name: Import GPG key
    become: true
    apt_key:
      keyserver: keyserver.ubuntu.com
      id: 4D64390375060AA4

  - name: add cri-o repository to package manager
    apt_repository:
      repo: 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /'
      state: present
      update_cache: yes
      filename: devel:kubic:libcontainers:stable.list

  - name: Add cri-o repository to package manager
    apt_repository:
      repo: 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.23/xUbuntu_20.04/ /'
      state: present
      update_cache: yes
      filename: /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:1.23.list

  - name: Add GPG keys cri-o
    ansible.builtin.apt_key:
      url: https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:1.23/xUbuntu_20.04/Release.key
      keyring: /etc/apt/trusted.gpg.d/libcontainers.gpg
      state: present

  - name: Add GPG keys xUbuntu
    ansible.builtin.apt_key:
      url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key
      keyring: /etc/apt/trusted.gpg.d/libcontainers.gpg
      state: present

  - name: Update and install crio and crio-tools
    apt:
      name: "{{ packages }}"
      update_cache: true
      state: present
    vars:
      packages:
        - cri-o
        - cri-tools
        - cri-o-runc
        - runc

  - name: Restart service cri-o 
    ansible.builtin.systemd:
      state: restarted
      daemon_reload: true
      name: crio 
      enabled: true

  
  - name: Add GPG keys xUbuntu
    apt_key:
      url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key
      keyring: /etc/apt/trusted.gpg.d/libcontainers.gpg
      state: present

  - name: Add GPG key for kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Add apt repository for kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present 
      filename: kubernetes.list

  - name: Install kubernetes binaries
    apt:
      name: "{{ packages }}"
      state: present 
      update_cache: yes
    vars:
      packages:
        - kubeadm
        - kubelet
        - kubectl

  - name: Install jq
    apt:
      name: jq 
      state: present
      update_cache: yes
  
  - name: Create file to configure node ip
    template:
      src: 'templates/node.sh'
      dest: '/node.sh' 

  - name: Execute configure node
    shell: "sh /node.sh"
  
  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted  